# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: mmdfmateus
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: calendar-helper
# "service" is the name of this project. This will also be added to your AWS resource names.
service: calendar-helper-api

provider:
  name: aws
  region: sa-east-1
  runtime: nodejs22.x
  architecture: arm64
  environment:
    DATABASE_URL: ${env:DATABASE_URL}
    JWT_SECRET: ${env:JWT_SECRET}
    BUCKET_NAME: ${self:resources.Resources.UploadsBucket.Properties.BucketName}
    MEALS_QUEUE_URL: !Ref MealsQueue
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
          Resource:
            - !Sub "${UploadsBucket.Arn}/*"
        - Effect: Allow
          Action:
            - sqs:SendMessage
          Resource:
            - !GetAtt MealsQueue.Arn

plugins:
  - serverless-offline

build:
  esbuild:
    bundle: true
    sourcemap: false

package:
  individually: true

resources:
  Resources:
    UploadsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: foodiary-audiovideo-uploads
    MealsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: meals-queue
        VisibilityTimeout: 60 # time in seconds SQS will wait for the message to be processed, if the message is not processed in this time, it will be retried
        RedrivePolicy:
          maxReceiveCount: 1
          deadLetterTargetArn: !GetAtt MealsDLQ.Arn
    MealsDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: meals-queue-dlq

functions:
  signIn:
    handler: src/functions/signIn.handler
    events:
      - httpApi:
          path: /signin
          method: POST

  signUp:
    handler: src/functions/signUp.handler
    events:
      - httpApi:
          path: /signup
          method: POST

  me:
    handler: src/functions/me.handler
    events:
      - httpApi:
          path: /me
          method: GET

  createMeal:
    handler: src/functions/createMeal.handler
    events:
      - httpApi:
          path: /meals
          method: POST

  listMeals:
    handler: src/functions/listMeals.handler
    events:
      - httpApi:
          path: /meals
          method: GET

  getMealById:
    handler: src/functions/getMealById.handler
    events:
      - httpApi:
          path: /meals/{mealId}
          method: GET

  fileUploadEvent:
    handler: src/functions/fileUploadEvent.handler
    events:
      - s3:
          bucket: !Ref UploadsBucket
          event: s3:ObjectCreated:*
          existing: true
          forceDeploy: true

  processMeal:
    handler: src/functions/processMeal.handler
    events:
      - sqs:
          arn: !GetAtt MealsQueue.Arn
          batchSize: 1
